#!/usr/bin/perl

# stomp-varnishhtpcd      Translates multicast htcp to varnish local http purge
#
# chkconfig: - 90 10
# description: HTCP2Varnish purger

#
# Released under some license as perl AL || GPL
#
# Requires the second patch at http://varnish.projects.linpro.no/ticket/265
#


use strict;
use URI;
use warnings;

use Socket;
use JSON;
use IO::Socket;
use LWP::UserAgent;
use Net::Stomp;

my $ip_add_membership;
if($^O eq 'linux') {
    $ip_add_membership = 35;
} else {
    die "no constants for non linux platforms";
}

use Working::Daemon;
my $daemon = Working::Daemon->new();

$daemon->parse_options(
    'cache=s@'            => [] => 'Where to purge',
    'debug'               => 0 =>  "Debugging",
    'stomp_username=s'    => 'guest' => "Stomp username",
    'stomp_password=s'    => 'guest' => "Stomp password",
    'stomp_server=s'      => '127.0.0.1' => "Stomp Server",
    'stomp_port=i'        => '61613' => "stomp port",
    'stomp_destination=s' => 'purges' => "Waht routing key to read",
    'name'                => 'stomp-varnishd' => '',
    );



$daemon->do_action;
use Data::Dumper;
print Dumper($daemon->options);

use threads;
use threads::shared;
my %servers;
my %servers_count_success : shared;
my %servers_count_fail : shared;
my @errors : shared;
use Thread::Queue;


my $admin = threads->create(sub {
    my $sock = IO::Socket::INET->new
        (Listen    => 5,
         LocalAddr => 'localhost',
         LocalPort => 9001,
         Proto     => 'tcp',
         Reuse     => 1,
        );
    while(my $connection = $sock->accept) {
	$connection->print("# Server\tPending\tDelivered\tFailed\n");
        close($connection);
    }
    		});


my $stomp = Net::Stomp->new( {hostname => $daemon->options->{'stomp_server'},
			      port     => $daemon->options->{'stomp_port'},
			     });

$stomp->connect( {login    => $daemon->options->{'stomp_username'},
		  passcode => $daemon->options->{'stomp_password'} },);

$stomp->subscribe( {destination => '', 
		   exchange => 'amq.topic', 
		   routing_key => $daemon->options->{'stomp_destination'}}, 
		  id => 1);

while(1) {
  
    my $frame = $stomp->receive_frame;
  
    my $obj = jsonToObj($frame->body);
    my $url = $obj->{url};
    warn "Purging $url\n";

  $0 = $daemon->name ." worker - purging $url";
  





}

exit;

1;
