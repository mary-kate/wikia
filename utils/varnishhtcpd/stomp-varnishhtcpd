#!/usr/bin/perl

# stomp-varnishhtpcd      Translates multicast htcp to varnish local http purge
#
# chkconfig: - 90 10
# description: HTCP2Varnish purger

#
# Released under some license as perl AL || GPL
#
# Requires the second patch at http://varnish.projects.linpro.no/ticket/265
#


use strict;
use URI;
use warnings;

use Socket;
use JSON;
use IO::Socket;
use LWP::UserAgent;
use Net::Stomp;

my $ip_add_membership;
if($^O eq 'linux') {
    $ip_add_membership = 35;
} else {
    die "no constants for non linux platforms";
}
use Sys::Hostname;
use Working::Daemon;
my $daemon = Working::Daemon->new();

$daemon->parse_options(
    'cache=s'             => '127.0.0.1' => 'Where to purge',
    'debug'               => 0 =>  "Debugging",
    'stomp_username=s'    => 'guest' => "Stomp username",
    'stomp_password=s'    => 'guest' => "Stomp password",
    'stomp_server=s'      => '127.0.0.1' => "Stomp Server",
    'stomp_port=i'        => '61613' => "stomp port",
    'stomp_destination=s' => hostname() => "Waht routing key to read",
    'stomp_key=s'         => 'purges' => "Waht routing key to read",
    'name'                => 'stomp-varnishd' => '',
    );



$daemon->do_action;
use Data::Dumper;
print Dumper($daemon->options);

use threads;
use threads::shared;

my @errors : shared;
use Thread::Queue;

my %purges_success :shared;
my %purges_fail :shared;
my %purges_error :shared;

my $admin = threads->create(sub {
    my $sock = IO::Socket::INET->new
        (Listen    => 5,
         LocalAddr => 'localhost',
         LocalPort => 9002,
         Proto     => 'tcp',
         Reuse     => 1,
        ) || die $!;
    while(my $connection = $sock->accept) {
	$connection->print(Dumper({ success => \%purges_success, 
				    fail    => \%purges_fail, 
				    error   => \%purges_error}));
        close($connection);
    }
			    });
    

my $stomp = Net::Stomp->new( {hostname => $daemon->options->{'stomp_server'},
			      port     => $daemon->options->{'stomp_port'},
			     });

$stomp->connect( {login    => $daemon->options->{'stomp_username'},
		  passcode => $daemon->options->{'stomp_password'} },);

$stomp->subscribe( {destination => $daemon->options->{'stomp_destination'}, 
		   exchange => 'amq.topic', 
		   routing_key => $daemon->options->{'stomp_key'}}, 
		  id => 1);



my $cache = $daemon->options->{'cache'};
my $ua = LWP::UserAgent->new(keep_alive => 1);
$ua->agent("HTCP Purger");
$ua->proxy('http', "http://$cache:80/");



while(1) {
  
    my $frame = $stomp->receive_frame;
  
    my $obj = jsonToObj($frame->body);
    my $url = $obj->{url};
    warn "Purging $url\n";

    $0 = $daemon->name ." worker - purging $url";
  
    for my $compression ('', 'gzip', 'deflate') {
	$ua->default_header('Accept-Encoding' => $compression);

	my $req = HTTP::Request->new(PURGE => "$url");

	my $res = $ua->request($req);
	if($res->is_success()) {
	    warn "Purged $url $compression\n";
	    $purges_success{$compression}++;
	} else {
	    warn "Purging $url failed: @{[$res->status_line]}\n";
	    $purges_fail{$cache}++;
	}

    }

}

exit;

1;
