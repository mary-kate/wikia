<?php
/**
 * Special:GetFamily extension
 * Generating family file for pywikibediabot
 * Wikia @2007
 * 
 * by Łukasz "Egon" Matysiak  (egon@wikia.com)
 */

if (! Defined ('MEDIAWIKI'))
{
    Echo '[ <b> Error <b /> ] This is not a valid entry point.' . "\n";
    Exit (1);
}

$wgExtensionFunctions [] = 'wfInitiateSpecialGetFamily';

include_once( "$IP/extensions/wikia/WikiCurl/WikiCurl.php" );

function wfInitiateSpecialGetFamily(){
	Global $IP, $wgMessageCache, $wgAvailableRights, $wgGroupPermissions;
	
	Require_Once ($IP. '/includes/SpecialPage.php');
	
	$wgSpecialPages ['GetFamily'] = Array ('SpecialPage', 'GetFamily');
	SpecialPage::AddPage (new SpecialPage ('GetFamily', 'GetFamily', True, 'wfSpecialGetFamily', False));
	$wgMessageCache->AddMessage ('getfamily', 'Get Pywikipediabot Family');
	$wgMessageCache->AddMessage ('interwikierror', 'Error: inncorrect interwiki setup, contact Your local admin.' );

	$wgAvailableRights[] = 'GetFamily';
    $wgGroupPermissions['*'    ]['GetFamily'] = true;
	
	//$wgGroupPermissions['bot']['getfamily'] = true;
	//$wgGroupPermissions['staff']['getfamily'] = true;
}

function wfSpecialGetFamily(){
	global $wgRequest, $wgOut, $wgLanguageNames;
	global $wgScript, $wgDBname, $wgLanguageCode, $wgSitename, $wgServer, $wgArticlePath, $wgCanonicalNamespaceNames,$wgVersion;
	
	$out = '';
	
	if ($wgRequest->getVal('action') == 'GetLocal'){
		$db =& wfGetDB( DB_SLAVE );
		$fromLang = $wgRequest->getVal('fromLang'); 
		$result = $db->query( "SELECT iw_url FROM interwiki WHERE iw_prefix ='$fromLang';");
		if ($object = $db->fetchObject($result) ){
			$fromLang = $object->iw_url;
		}else{
			$fromLang = '';
		}

		Header ('Content-Type: text/xml');
		$out .= "<family>\n";
		
		$out .= wfElement('urlcheck', array(), $fromLang)."\n";
		$out .= wfElement('language', array(), $wgLanguageCode)."\n";
		$out .= wfElement('hostname', array(), str_replace('http://', '', $wgServer))."\n";
		$out .= wfElement('path', array(), $wgScript )."\n";
		

		//$keys = array_keys ($wgCanonicalNamespaceNames);
		$language = Language::factory($wgLanguageCode);
		$array = $language->getNamespaces();
		$keys = array_keys ($array);
		
		foreach( $keys as $key ){
		   $out .= wfOpenElement('namespace', array()) . "\n";
		   $out .= wfElement('key', array(), $key) . "\n";
		   //$out .= wfElement('name', array(), $wgCanonicalNamespaceNames[$key]) . "\n";
		   $out .= wfElement('name', array(), $array[$key]) . "\n";
		   $out .= wfCloseElement('namespace');
		}
		$out .= "</family>\n";
	}else{
		Header ('Content-Type: text');
		
		$langcodes = array_keys($wgLanguageNames);
		
		$db =& wfGetDB( DB_SLAVE );
		foreach( $langcodes as $lang_code){
			$where .= ', ' . $db->AddQuotes($lang_code);
		}
		$where = SubStr ($where, 1);
		$result = $db->query( "SELECT iw_prefix, iw_url FROM interwiki WHERE iw_prefix IN ( $where );");
		
		$datalinks = array();
		
		while($dbObject = $db->fetchObject($result)){
			$datalinks[$dbObject->iw_prefix] = $dbObject->iw_url;
		}
		
		$datalinks[$wgLanguageCode] = $wgServer.$wgArticlePath;
		
		unset($datalinks['bug']);
		
		$metadata = array();
		$metadata['langs'] = array();
		$metadata['path'] = array();
		$namespacedata = array();
		
		foreach( $datalinks as $lang => $link ){
			$link = str_replace('$1', 'Special:GetFamily?action=GetLocal&fromLang='.$wgLanguageCode, $link);
            		$handler = new WikiCurl();
            		$content = $handler->get($link);
            		if (strpos( $content, '<family>' ) === false ){
               			unset($handler);
               			continue;
            		}
            		$content = substr( $content, strpos( $content, "\r\n\r\n" ) + 4 );
            		unset($handler);

			try{
               			$xml = new SimpleXMLElement($content);
            		} catch (Exception $e){
             			continue;
            		}

	//		$urlcheck = (string)$xml->urlcheck;
    //        		if ( strcmp($urlcheck, $wgServer.$wgArticlePath) != 0 ){
    //           			continue;
    //        		}
			$metadata['langs'][$lang] = (string) $xml->hostname;
			$metadata['path'][$lang] = (string)$xml->path;
			
			foreach( $xml->namespace as $namespace ){
				$namespacedata[(int)$namespace->key][$lang] = (string)$namespace->name;
			}
		}

        	if ($namespacedata!=array()){	
$out .= "# -*- coding: utf-8  -*-

'''
The $wgSitename family.

This is config file for pywikipediabot framework.
It was generated by Special:GetFamily (a Wikia extension).
        
Save this file to families/{$wgDBname}_family.py in your pywikibot installation       
The pywikipediabot itself is available for free download from sourceforge.net          
'''

import family

class Family(family.Family):
\t 
\t def __init__(self):
\t\t family.Family.__init__(self)
\t\t self.name = '$wgDBname' #Set the family name; this should be the same as in the filename.
\t\t 
\t\t self.langs = {\n";

		$keys = array_keys($metadata['langs']);
		
		foreach($keys as $key){
           $out .=  "\t\t\t'$key': '{$metadata['langs'][$key]}', \n";
		}
		
		$out .="\t\t }\n\t\t \n";

		$namespace_keys = array_keys($namespacedata);
		
		foreach($namespace_keys as $key){
			$langs = array_keys($namespacedata[$key]);
			$out .= "\t\t self.namespaces[$key] = {\n";
					
			foreach($langs as $lang){
				$out .= "\t\t\t '$lang':u'{$namespacedata[$key][$lang]}',\n";
			}
			$out .=  "\t\t }\n\t\t \n";
		}
		$version = array();
		preg_match('/[0-9]*\.[0-9]*/',$wgVersion, $version );
		$version = $version[0];
		
$out .="\t\t 
\t def hostname(self,code):
\t\t return self.langs[code]
\t\t 
\t def path(self, code):
\t\t path = ''\n";

		$keys = array_keys($metadata['langs']);
		
		foreach($keys as $key){
           $out .=  "\t\t if (code=='$key'):\n\t\t\t path='{$metadata['path'][$key]}'\n";
		}

		

$out .="\t\t return path
\t 
\t def login_address(self,code):
\t\t return '%s?title=%s:Userlogin&action=submitlogin' % (self.path(code), self.special_namespace_url(code))
\t 
\t def version(self, code):
\t\t return '".$version."'  #The MediaWiki version used. Not very important in most cases.
";
}else{
  $out .= wfMsg('interwikierror');
}
	}
	die( $out );
}
?>
