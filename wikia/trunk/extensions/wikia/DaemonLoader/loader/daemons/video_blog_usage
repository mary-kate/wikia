#!/usr/bin/perl

my $wikia_lib;
BEGIN {
	$wikia_lib = "/home/moli/wikia/wikia-utils/lib/"; 
	$wikia_lib = "/home/wikicities/conf/mediawiki/wikia-utils/lib" if !(-e $wikia_lib);
}

=needed modules
=cut
use DBI;
use Cwd;
use Getopt::Long;
use Data::Dumper;

use Date::Manip;
use Switch;
use Spreadsheet::WriteExcel::Big;

use lib $wikia_lib;
use Wikia::Config;
use Wikia::Utils;
use Wikia::DB;

=default values
=cut
my $email_title = "Image, video and blog report";
my $DEF_MONTH = "1";
my $XLS_FILE = "/home/reports/video_blog_usage/video_blog_usage_" . substr (&ParseDate("today"), 0, 8) . ".xls";

=list of namespaces 
=cut
use constant NS_BLOG_ARTICLE => "500";
use constant NS_BLOG_ARTICLE_TALK => "501";
use constant NS_BLOG_LISTING => "502";
use constant NS_BLOG_LISTING_TALK => "503";
use constant NS_VIDEO => "400";
use constant NS_VIDEO_TALK => "401";
use constant NS_MAIN => "1";
use constant NS_IMAGE => "6";

=help function
=cut
sub usage() {
    print <<EOF
video_blog_usage [--help] [--usedb=s] 
	help - print this text
	all - check all Wikis (default option)
	usedb - comma-separated list of Wikis (database name) to use
	months - number of month to check (default 1 (last month))
	fromWiki - identifier of Wikia as begin of range. 
	toWiki - identifier of Wikia as end of range. 
	TASKID - identifier of job
EOF
;	
}

=info
========================================
Main program 
========================================
=cut

=read script args 
=cut
my ($help, $usedb, $months, $fromWiki, $toWiki, $TASKID) = @_;
GetOptions('help' => \$help, 'all' => \$all, 'usedb=s' => \$usedb, 'months=s' => \$months, 'fromWiki=s' => \$fromWiki, 'toWiki=s' => \$toWiki, 'TASKID=s' => \$TASKID);

my @ltime = localtime;

=checking args
=cut
if ($help) {
	&usage();
	exit;
} elsif ( (!$all) && (!$usedb) && (!$fromWiki) && (!$toWiki) ) {
	print STDERR "Use option --help to know how to use script \n";
	exit;
} 

=config -> set logfile 
=cut
my $oConf = new Wikia::Config( {logfile => "/tmp/video_blog_usage.log"} );

=db archive connection
=cut
my $db_ext = new Wikia::DB( {"host" => DB_EXT_SLAVE} );

=wikia utils 
=cut
my $oUtils = new Wikia::Utils();

=db slave connection
=cut
my $db = new Wikia::DB( {"host" => DB_SLAVE} );

#----
=parse args
=cut
my @where_db = ("city_public = 1");
if ($usedb) {
	my @use_dbs = split /,/,$usedb;
	push @where_db, "city_dbname in (".join(",", map { $db->handler()->quote($_) } @use_dbs).")";
} elsif ($from_city) {
	push @where_db, "city_id >= ".$db->handler()->quote($from_city);
} elsif ($to_city) {
	push @where_db, "city_id <= ".$db->handler()->quote($to_city);
}

=get list of wikis -> its ids and names
=cut
my $databases = $db->get_wikis(\@where_db);
my $wikiUrls = $db->get_wgservers();

=input parameters - set default values
=cut
$months = $DEF_MONTH unless $months;
=end input params
=cut

=build dates structure 
=cut
my $daysago = $months;
my $dates = $oUtils->get_dates($daysago, "month", "now", "$daysago months ago");
my @dates = ();
if (scalar @$dates) {		
	@dates = map { substr ($_, 0, 6) } @$dates;
}
=end of build structure
=cut
if (!@dates) {
	$oConf->log("No dates found to generate report (invalid parameters): " . $daysago);
	exit();
}
=get task info
=cut
$oConf->log("\n\nTask ID: $TASKID started");
$oConf->log("Processing: ".scalar keys(%$databases)." Wikis");

my $task = $db_ext->get_daemon_task($TASKID);
my ($DATA, $DATAALL, $DATAMOST) = ();
=foreach wiki generate data 
=cut
my %nspaceNames = (
	NS_BLOG_ARTICLE() => "User_blog",
	NS_BLOG_ARTICLE_TALK() => "User_blog_comment",
	NS_BLOG_LISTING() => "Blog",
	NS_BLOG_LISTING_TALK() => "Blog_talk",
	NS_VIDEO() => "Video",
	NS_VIDEO_TALK() => "Video_talk",
	NS_MAIN() => "Main",
	NS_IMAGE() => "Image",
);

my @nspaces = (NS_BLOG_ARTICLE,NS_BLOG_ARTICLE_TALK,NS_BLOG_LISTING,NS_BLOG_LISTING_TALK,NS_VIDEO,NS_VIDEO_TALK);
my @nspacesAll = (NS_MAIN,NS_IMAGE,NS_BLOG_ARTICLE,NS_BLOG_ARTICLE_TALK,NS_BLOG_LISTING,NS_BLOG_LISTING_TALK,NS_VIDEO,NS_VIDEO_TALK);
foreach my $num (sort ( map { sprintf("%012u",$_) } (keys %$databases) )) {
	#--- set city;
	my $city_id = int $num;
	#--- set start time
	my $start_sec = time();
	$oConf->log($databases->{$city_id} . " processed (city_id: ".$city_id.")");
	
	$db_ext->handler->ping();
	
=main loop for every wiki and every period
=cut
	my $prevdate;
	foreach (@dates) {
		my $date = $_;

		my $w = ($wikiUrls->{$city_id}) ? $wikiUrls->{$city_id} : $city_id;
		#- 
		# from wikiastats - nbr of pages and revisions (PER WIKI)
		#-
		my $select = "af_namespace as nspace, count(*) as page_count, sum(af_page_count) as rev_count";
		my $from = "`wikiastats`.`".$databases->{$city_id}."_articles_full`";
		my @where = (
			"af_namespace in (" . join(",", map { $db_ext->handler->quote($_) } @nspaces) . ")",
			"date_format(af_stats_date, '%Y%m') = ".$db_ext->handler->quote($date)
		);
		my @options = ("group by af_namespace");
		
		my $sth = $db_ext->select_many($select, $from, \@where, \@options);
		if ($sth) {
			while(my $values = $sth->fetchrow_hashref()) {
				$DATA->{$date}->{$w}->{$values->{nspace}}->{page_count} = $values->{page_count};
				$DATA->{$date}->{$w}->{$values->{nspace}}->{rev_count} = $values->{rev_count};
			}
			$sth->finish();
		}

		#- 
		# from dbstats - nbr of pageviews (PER WIKI)
		#-
		$select = "pv_namespace as nspace, sum(pv_views) as views_count";
		$from = "`dbstats`.`city_page_views`";
		@where = (
			"pv_namespace in (" . join(",", map { $db_ext->handler->quote($_) } @nspaces) . ")",
			"date_format(pv_use_date, '%Y%m') = ".$db_ext->handler->quote($date),
			"pv_city_id = ".$db_ext->handler->quote($city_id)
		);
		@options = ("group by pv_namespace");
		
		$sth = $db_ext->select_many($select, $from, \@where, \@options);
		if ($sth) {
			while(my $values = $sth->fetchrow_hashref()) {
				$DATA->{$date}->{$w}->{$values->{nspace}}->{views_count} = $values->{views_count};
			}
			$sth->finish();
		}
		
		#- 
		# from wikiastats - nbr of removed articles (PER WIKI)
		#-
		$select = "ar_namespace as nspace, count(*) as remove_count";
		$from = "`".$databases->{$city_id}."`.`archive`";
		@where = (
			"date_format(ar_timestamp, '%Y%m') = ".$db_ext->handler->quote($date),
			"ar_namespace in (" . join(",", map { $db_ext->handler->quote($_) } @nspaces) . ")",
		);
		@options = ("group by ar_namespace");
		$sth = $db->select_many($select, $from, \@where, \@options);
		if ($sth) {
			while(my $values = $sth->fetchrow_hashref()) {
				$DATA->{$date}->{$w}->{$values->{nspace}}->{remove_count} = $values->{remove_count};
			}
			$sth->finish();
		}
		
		#-
		# from wikiastats - nbr of pages created in month
		#-
		$select = "af_namespace as nspace, count(*) as page_count";
		$from = "`wikiastats`.`".$databases->{$city_id}."_articles_full`";
		@where = (
			"af_namespace in (" . join(",", map { $db_ext->handler->quote($_) } @nspacesAll) . ")",
			"date_format(af_stats_date, '%Y%m') = ".$db_ext->handler->quote($date)
		);
		@options = ("group by af_namespace");
		
		$sth = $db_ext->select_many($select, $from, \@where, \@options);
		if ($sth) {
			while(my $values = $sth->fetchrow_hashref()) {
				$DATAALL->{$date}->{$values->{nspace}}->{page_count} = 0 unless ($DATAALL->{$date}->{$values->{nspace}}->{page_count});
				$DATAALL->{$date}->{$values->{nspace}}->{page_count} += $values->{page_count};
				$DATAMOST->{$date}->{$values->{nspace}}->{$w} = $values->{page_count};
			}
			$sth->finish();
		}

		#- 
		# from dbstats - nbr of pageviews (PER WIKI)
		#-
		$select = "pv_namespace as nspace, sum(pv_views) as views_count";
		$from = "`dbstats`.`city_page_views`";
		@where = (
			"pv_namespace > 0",
			"pv_namespace in (" . join(",", map { $db_ext->handler->quote($_) } @nspacesAll) . ")",
			"date_format(pv_use_date, '%Y%m') = ".$db_ext->handler->quote($date),
			"pv_city_id = ".$db_ext->handler->quote($city_id)
		);
		@options = ("group by pv_namespace");
		
		$sth = $db_ext->select_many($select, $from, \@where, \@options);
		if ($sth) {
			while(my $values = $sth->fetchrow_hashref()) {
				$DATAALL->{$date}->{$values->{nspace}}->{views_count} = 0 unless($DATAALL->{$date}->{$values->{nspace}}->{views_count});
				$DATAALL->{$date}->{$values->{nspace}}->{views_count} += $values->{views_count};
			}
			$sth->finish();
		}
	}
=end of main loop
=cut
	my $end_sec = time();
	my @ts = gmtime($end_sec - $start_sec);

	$oConf->log($databases->{$city_id} . " processed ".sprintf ("%d hours %d minutes %d seconds",@ts[2,1,0]));
}

#my $d = Data::Dumper->Dump([%{$DATA->{511}}], [qw(data)]);
#$oConf->log($d);

=checking results
=cut
$oConf->log("checking results and build XLS file");
my $res = ();

if (! scalar keys %$DATA) {
	$oConf->log("No data found for parameters: " . $daysago);
	exit;
}

=XLS - default settings ========================
=init XLS spreadsheet
=cut
my $dir = "/home/reports/video_blog_usage/";
mkdir($dir) if (!(-e $dir)) ;
unlink ($XLS_FILE);
my $workbook = Spreadsheet::WriteExcel::Big->new($XLS_FILE);
my @cols = (A..Z, AA..AZ);

my $formatHdrMerge = $workbook->add_format( bold => 1, color => 'black', valign => 'vcenter', align => 'center' );
my $formatHdr = $workbook->add_format( bold => 1, color => 'black', align => 'center');
my $formatBody = $workbook->add_format( bold => 0, color => 'black', valign => 'vcenter', align => 'right');
my $formatBodyDomain = $workbook->add_format( bold => 0, color => 'blue', valign => 'vcenter', align => 'left');
my $formatBodySum = $workbook->add_format( bold => 1, color => 'black', valign => 'vcenter', align => 'right');

=first worksheet with blogs and video edits, pages and views per wiki
=cut
my %colsHdr = (
	'page_count' => "# pages", 
	'rev_count' => "# edits", 
	'views_count' => "# pageviews", 
	'remove_count' => "# pages removed"
);
foreach (@dates) {
	my $date = $_;
	#--
	my $sheet = $workbook->add_worksheet('Blog,Video - per wiki (' . $date . ')' );
	$sheet->activate();
	my ($col, $row) = (0, 2); 
	$sheet->write($row, $col, "Wikia", $formatHdr); 
	my $colHdr = ++$col;
	foreach (@nspaces) {
		#--
		my $range = $cols[$colHdr] . $row . ":" . $cols[$colHdr + (scalar(keys %colsHdr) - 1)] . $row;
		$sheet->merge_range($range, $nspaceNames{$_}, $formatHdrMerge); 
		$col++; 
		foreach my $key (keys %colsHdr) {
			$sheet->write($row, $colHdr, $colsHdr{$key}, $formatHdr);
			$colHdr++;
		}
	}
	$row++; $col=0;
	#---
	if ($DATA->{$date}) {
		foreach my $url (sort keys %{$DATA->{$date}}) {
			$sheet->write($row, $col, $url, $formatHdr);
			foreach (@nspaces) {
				my $nspace = $_;
				foreach my $key (keys %colsHdr) {
					my $val = 0;
					$col++; 
					$val = $DATA->{$date}->{$url}->{$nspace}->{$key} if ($DATA->{$date}->{$url}->{$nspace}->{$key});
					$sheet->write($row, $col, $val, $formatBody);
				}
			}
			$col = 0; $row++;
		}
	}
}

=next sheet with stats for all wikis
=cut
my $sheet = $workbook->add_worksheet( 'Blog,Video,Images - all wikis' ); $sheet->activate();
my ($col, $row) = (0, 2); 
$sheet->write($row, $col, "Date", $formatHdr); 
foreach (@nspacesAll) {
	$sheet->write($row, ++$col, $nspaceNames{$_}, $formatHdr);
}
foreach (@dates) {
	my $date = $_;
	$row++; $col=0;
	$sheet->write($row, $col++, $date, $formatHdr); 
	if ($DATAALL->{$date}) {
		foreach (@nspacesAll) {
			my $val = 0;
			$val = $DATAALL->{$date}->{$_}->{page_count} if ($DATAALL->{$date}->{$_}->{page_count});
			$sheet->write($row, $col, $val, $formatBody);
			$col++;
		}
	}
}

=next sheet with top 50 wikis
=cut
#$DATAMOST->{$date}->{$values->{nspace}}->{$w}
foreach (@dates) {
	my $date = $_;

	$sheet = $workbook->add_worksheet( 'Top 50 wikis (' . $date . ')' ); $sheet->activate();
	my ($col, $row) = (0, 2);
	foreach (@nspacesAll) {
		$sheet->write($row, $col, "Wikia", $formatHdr); 
		$sheet->write($row, ++$col, $nspaceNames{$_}, $formatHdr);
		$col = $col + 2;
	}
	#----
	$row++; $col = 0;
	if ($DATAMOST->{$date}) {
		foreach (@nspacesAll) {
			$row = 2; 
			if ($DATAMOST->{$date}->{$_}) {
				my $loop = 0;
				foreach my $url (sort { $DATAMOST->{$date}->{$_}->{$b} <=> $DATAMOST->{$date}->{$_}->{$a} } keys %{$DATAMOST->{$date}->{$_}}) {
					$row++;
					$sheet->write($row, $col, $url, $formatHdr);
					$sheet->write($row, ++$col, $DATAMOST->{$date}->{$_}->{$url}, $formatBody);
					$loop++;
					next if ($loop > 50);
				}
				$col = $col + 2;
			}
		}
	}
}

=close XLS file
=cut
$workbook->close();

=finish
=cut
system("gzip -c $XLS_FILE > $XLS_FILE.gz") if ( -e $XLS_FILE );
%updata = ("-dj_result_file" => "concat_ws(',', dj_result_file, '".$XLS_FILE.".gz')");
$oConf->log("update task info in database (subdomains)");
#$q_up = $db_ext->update_daemon_task( \%updata, $TASKID );
#if ( $q_up ) {
#	$oConf->log("send emails with report");
#	$oUtils->send_file( $email_title, $task->{dj_result_emails}, $XLS_FILE . ".gz" );
#}
$oConf->log("process done");

1;
