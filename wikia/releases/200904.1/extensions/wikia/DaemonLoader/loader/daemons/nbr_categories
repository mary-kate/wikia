#!/usr/bin/perl

my $wikia_lib;
BEGIN {
	$wikia_lib = "/home/moli/wikia/wikia-utils/lib/"; 
	$wikia_lib = "/home/wikicities/conf/mediawiki/wikia-utils/lib" if !(-e $wikia_lib);
}

=needed modules
=cut
use DBI;
use Cwd;
use Getopt::Long;
use Data::Dumper;

use Date::Manip;
use Switch;
use Spreadsheet::WriteExcel::Big;

use lib $wikia_lib;
use Wikia::Config;
use Wikia::Utils;
use Wikia::DB;

=default values
=cut
my $email_title = "Number of categories";
my $XLS_FILE = "/home/reports/nbr_categories/nbr_categories_" . substr (&ParseDate("today"), 0, 8) . ".xls";

=help function
=cut
sub usage() {
    print <<EOF
video_blog_usage [--help] [--usedb=s] 
	help - print this text
	all - check all Wikis (default option)
	usedb - comma-separated list of Wikis (database name) to use
	fromWiki - identifier of Wikia as begin of range. 
	toWiki - identifier of Wikia as end of range. 
	TASKID - identifier of job
EOF
;	
}

=info
========================================
Main program 
========================================
=cut

=read script args 
=cut
my ($help, $usedb, $fromWiki, $toWiki, $TASKID) = @_;
GetOptions('help' => \$help, 'all' => \$all, 'usedb=s' => \$usedb, 'fromWiki=s' => \$fromWiki, 'toWiki=s' => \$toWiki, 'TASKID=s' => \$TASKID);

my @ltime = localtime;

=checking args
=cut
if ($help) {
	&usage();
	exit;
} elsif ( (!$usedb) && (!$fromWiki) && (!$toWiki) ) {
	$all = 1;
} elsif (!$TASKID) {
	print STDERR "Use option --help to know how to use script \n";
	exit;
}

=config -> set logfile 
=cut
my $oConf = new Wikia::Config( {logfile => "/tmp/nbr_categories.log"} );

=db archive connection
=cut
my $db_ext = new Wikia::DB( {"host" => DB_EXT_SLAVE} );

=wikia utils 
=cut
my $oUtils = new Wikia::Utils();

=db slave connection
=cut
my $db = new Wikia::DB( {"host" => DB_SLAVE} );

#----
=parse args
=cut
my @where_db = ("city_public = 1");
if ($usedb) {
	my @use_dbs = split /,/,$usedb;
	push @where_db, "city_dbname in (".join(",", map { $db->handler()->quote($_) } @use_dbs).")";
} elsif ($from_city) {
	push @where_db, "city_id >= ".$db->handler()->quote($from_city);
} elsif ($to_city) {
	push @where_db, "city_id <= ".$db->handler()->quote($to_city);
}

=get list of wikis -> its ids and names
=cut
my $databases = $db->get_wikis(\@where_db);
my $wikiUrls = $db->get_wgservers();

=get task info
=cut
$oConf->log("\n\nTask ID: $TASKID started");
$oConf->log("Processing: ".scalar keys(%$databases)." Wikis");

my $task = $db_ext->get_daemon_task($TASKID);
my ($DATA, $DATA_COUNT) = ();
=foreach wiki generate data 
=cut
foreach my $num (sort ( map { sprintf("%012u",$_) } (keys %$databases) )) {
	#--- set city;
	my $city_id = int $num;
	#--- set start time
	my $start_sec = time();
	$oConf->log($databases->{$city_id} . " processed (city_id: ".$city_id.")");
	
	$db->handler->ping();
	
=main process for every wiki
=cut
	my $w = ($wikiUrls->{$city_id}) ? $wikiUrls->{$city_id} : $city_id;
	#- 
	# from wikiastats - nbr of pages and revisions (PER WIKI)
	#-
	my $select = "cl_to, count(*) as cnt";
	my $from = "`".$databases->{$city_id}."`.`categorylinks`";
	my @where = ("cl_to != ''");
	my @options = ("group by cl_to");
	
	my $sth = $db->select_many($select, $from, \@where, \@options);
	my ($cnt, $loop) = 0;
	if ($sth) {
		while(my $values = $sth->fetchrow_hashref()) {
			$cnt = 0 unless ($cnt);
			$cnt += $values->{cnt};
			$loop++;
		}
		$sth->finish();
	}
	$DATA->{$w} = ($loop) ? $loop : 0;
	$DATA_COUNT->{$w} = ($cnt) ? $cnt : 0;

=end of main loop
=cut
	my $end_sec = time();
	my @ts = gmtime($end_sec - $start_sec);

	$oConf->log($databases->{$city_id} . " processed ".sprintf ("%d hours %d minutes %d seconds",@ts[2,1,0]));
}

=checking results
=cut
$oConf->log("checking results and build XLS file");
my $res = ();

if (! scalar keys %$DATA) {
	$oConf->log("No data found for parameters");
	exit;
}

=XLS - default settings ========================
=init XLS spreadsheet
=cut
my $dir = "/home/reports/nbr_categories/";
mkdir($dir) if (!(-e $dir)) ;
unlink ($XLS_FILE);

my $workbook = Spreadsheet::WriteExcel::Big->new($XLS_FILE);
my @cols = (A..Z, AA..AZ);
my $formatHdr = $workbook->add_format( bold => 1, color => 'black', align => 'center');
my $formatBody = $workbook->add_format( bold => 0, color => 'black', valign => 'vcenter', align => 'right');

=create XLS sheet with data
=cut
my $sheet = $workbook->add_worksheet('Nbr categories');
$sheet->activate();
my ($col, $row) = (0, 2); 
$sheet->write($row, $col, "Wikia", $formatHdr); 
$sheet->write($row, $col+1, "Nbr categories", $formatHdr); 
$sheet->write($row, $col+2, "Nbr links to categories", $formatHdr); 
foreach my $url (sort { $DATA->{$b} <=> $DATA->{$a} } keys %{$DATA}) {
	$row++;
	$sheet->write($row, $col, $url, $formatBody); 
	$sheet->write($row, $col+1, $DATA->{$url}, $formatBody); 
	$sheet->write($row, $col+2, ($DATA_COUNT->{$url}) ? $DATA_COUNT->{$url} : 0, $formatBody); 
}
=close XLS file
=cut
$workbook->close();

=finish
=cut
system("gzip -c $XLS_FILE > $XLS_FILE.gz") if ( -e $XLS_FILE );
%updata = ("-dj_result_file" => "concat_ws(',', dj_result_file, '".$XLS_FILE.".gz')");
$oConf->log("update task info in database (subdomains)");
$q_up = $db_ext->update_daemon_task( \%updata, $TASKID );
if ( $q_up ) {
	$oConf->log("send emails with report");
	$oUtils->send_file( $email_title, $task->{dj_result_emails}, $XLS_FILE . ".gz" );
}
$oConf->log("process done");

1;
