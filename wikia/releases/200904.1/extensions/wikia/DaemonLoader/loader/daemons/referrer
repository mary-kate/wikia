#!/usr/bin/perl

my $wikia_lib;
BEGIN {
	$wikia_lib = "/home/moli/wikia/wikia-utils/lib/";
	#my $wikia_lib = "/home/wikicities/conf/mediawiki/wikia-utils/lib";
}

=needed modules
=cut
use DBI;
use Cwd;
use Getopt::Long;
use Data::Dumper;

use Date::Manip;
use Switch;
use Spreadsheet::WriteExcel::Big;

use lib $wikia_lib;
use Wikia::Config;
use Wikia::Utils;
use Wikia::DB;

=default values
=cut
my @CHECK_ALLOWED = ("day", "week", "month");
my $DEF_WEEK = "6";
my $email_title = "Referrers report";
my $XLS_FILE_DETAILS = "/home/reports/referrer/referrer_details_" . substr (&ParseDate("today"), 0, 8) . ".xls";
my $XLS_FILE = "/home/reports/referrer/referrer_" . substr (&ParseDate("today"), 0, 8) . ".xls";

=help function
=cut
sub usage() {
    print <<EOF
referrer [--help] [--usedb=s] 
	help - print this text
	usedb - comma-separated list of Wikis (database name) to use
	weeks - number of previous weeks to check
	check - check every days|weeks|months - default "weeks"
	fromWiki - identifier of Wikia as begin of range. This parameter can be used when 'usedb' is not set!
	toWiki - identifier of Wikia as end of range. This parameter can be used when 'usedb' is not set!
	TASKID - identifier of job
EOF
;	
}

=info
========================================
Main program 
========================================
=cut

=read script args 
=cut
my ($help, $usedb, $weeks, $fromWiki, $toWiki, $TASKID) = @_;
GetOptions('help' => \$help, 'usedb=s' => \$usedb, 'weeks=s' => \$weeks, 'fromWiki=s' => \$fromWiki, 'toWiki=s' => \$toWiki, 'TASKID=s' => \$TASKID, 'check=s' => \$check);

my @ltime = localtime;

=checking args
=cut
if ($help) {
	&usage();
	exit;
} elsif ( (!$usedb) && (!$weeks) && (!$fromWiki) && (!$toWiki) ) {
	print STDERR "Use option --help to know how to use script \n";
	exit;
} 

=config -> set logfile 
=cut
my $oConf = new Wikia::Config( {logfile => "/tmp/referrer.log"} );

=db archive connection
=cut
my $db_ext = new Wikia::DB( {"host" => DB_EXT_SLAVE} );

=wikia utils 
=cut
my $oUtils = new Wikia::Utils();

=db slave connection
=cut
my $db = new Wikia::DB( {"host" => DB_SLAVE} );

#----
my @fields = ('ref_city_id', 'ref_domain', 'ref_timestamp', 'ref_count');
#----

=parse args
=cut
my @where_db;
if ($usedb) {
	my @use_dbs = split /,/,$usedb;
	push @where_db, "city_dbname in (".join(",", map { $db->handler()->quote($_) } @use_dbs).")";
} elsif ($from_city) {
	push @where_db, "city_id >= ".$db->handler()->quote($from_city);
} elsif ($to_city) {
	push @where_db, "city_id <= ".$db->handler()->quote($to_city);
}

=get list of wikis -> its ids and names
=cut
my $databases = $db->get_wikis(\@where_db);

=input parameters - set default values
=cut
$check = "week" if (!$oUtils->in_array(\@CHECK_ALLOWED, $check));
$weeks = $DEF_WEEK unless $weeks;
=end input params
=cut

=build dates structure 
=cut
my $daysago = ($weeks+1)*7;
my $dates = $oUtils->get_dates($daysago, $check, "now");
my @dates = ();
if (scalar @$dates) {
	@dates = map { substr ($_, 0, 8) } @$dates;
}
=end of build structure
=cut
if (!@dates) {
	$oConf->log("No dates found to generate report (invalid parameters): " . $daysago . ", ". $check);
	exit();
}

=get task info
=cut
$oConf->log("\n\nTask ID: $TASKID started");
$oConf->log("Processing: ".scalar keys(%$databases)." Wikis");

my $task = $db_ext->get_daemon_task($TASKID);

my ($DATA, $DATACOUNT, $DATA_SORT, $DATACOUNT_SORT) = ();
my ($DATADOMAINS, $DATADOMAINS_COUNT, $DATADOMAINS_SORT, $DATADOMAINS_COUNT_SORT) = ();

=foreach wiki generate data 
=cut
foreach my $num (sort ( map { sprintf("%012u",$_) } (keys %$databases) )) {
	#--- set city;
	my $city_id = int $num;
	#--- set start time
	my $start_sec = time();
	$oConf->log($databases->{$city_id} . " processed (city_id: ".$city_id.")");
	
	$db_ext->handler->ping();
	
=main loop for every wiki and every period
=cut
	my $prevdate;
	foreach (@dates) {
		if (defined $prevdate) {
			my $select = "ref_domain as domain, sum(ref_count) as cnt, " . $db_ext->handler->quote($_) . " as dt ";
			my $from = "`dbstats`.`city_wikireferer`";
			my @where = ( 
				"ref_city_id = ". $db_ext->handler->quote($city_id), 
				"date_format(ref_timestamp, '%Y%m%d') > ".$db_ext->handler->quote($prevdate),
				"date_format(ref_timestamp, '%Y%m%d') <= ".$db_ext->handler->quote($_)
			);
			my @options = ("group by ref_domain order by cnt desc, dt");
			
			my $sth = $db_ext->select_many($select, $from, \@where, \@options);
			if ($sth) {
				
				# clear data to order by last day period 
				if ($dates[scalar(@dates)-1] eq $_) {
					foreach my $domain (keys %{$DATA_SORT->{$city_id}}) {
						$DATA_SORT->{$city_id}->{$domain} = 0;
					}
					foreach my $domain (keys %{$DATADOMAINS_SORT->{$city_id}}) {
						$DATADOMAINS_SORT->{$city_id}->{$domain} = 0;
					}
				}
				
				while(my $values = $sth->fetchrow_hashref()) {
					# details
					$DATA->{$city_id}->{$_}->{$values->{domain}}->{count} = $values->{cnt};
					my $curvalue = $DATA->{$city_id}->{$_}->{$values->{domain}}->{count};
					my $prevvalue = 0;
					$prevvalue = $DATA->{$city_id}->{$prevdate}->{$values->{domain}}->{count} if ($DATA->{$city_id}->{$prevdate});
					$DATA->{$city_id}->{$_}->{$values->{domain}}->{change} = $oUtils->get_increase($curvalue, $prevvalue);
					#--
					$DATA_SORT->{$city_id}->{$values->{domain}} = $values->{cnt};

					# only subdomains
					my $dom = $values->{domain};
					if ($oUtils->is_ip($dom)) {
						my @m = split(/\./, $dom);
						$dom = join(".", @m[0,1]).".*";
					} else {
						$dom = $oUtils->get_subdomain($dom);
					}
					$DATADOMAINS->{$city_id}->{$_}->{$dom}->{count} = 0 unless ($DATADOMAINS->{$city_id}->{$_}->{$dom}->{count});
					$DATADOMAINS->{$city_id}->{$_}->{$dom}->{count} += $values->{cnt}; 
					$prevvalue = 0;
					$prevvalue = $DATADOMAINS->{$city_id}->{$prevdate}->{$dom}->{count} if ($DATADOMAINS->{$city_id}->{$prevdate});
					$DATADOMAINS->{$city_id}->{$_}->{$dom}->{change} = $oUtils->get_increase($DATADOMAINS->{$city_id}->{$_}->{$dom}->{count}, $prevvalue);
					#--
					$DATADOMAINS_SORT->{$city_id}->{$dom} = 0 unless($DATADOMAINS_SORT->{$city_id}->{$dom});
					$DATADOMAINS_SORT->{$city_id}->{$dom} += $values->{cnt};
				}
				$sth->finish();
			}
		}
		$prevdate = $_;
	}

	$prevdate = undef;
	foreach (@dates) {
		if (defined $prevdate) {
			my $select = "ref_domain as domain, count(ref_domain) as cnt, " . $db_ext->handler->quote($_) . " as dt ";
			my $from = "`dbstats`.`city_wikireferer`";
			my @where = ( 
				"ref_city_id = ". $db_ext->handler->quote($city_id), 
				"date_format(ref_timestamp, '%Y%m%d') > ".$db_ext->handler->quote($prevdate),
				"date_format(ref_timestamp, '%Y%m%d') <= ".$db_ext->handler->quote($_)
			);
			my @options = ("group by ref_domain order by cnt desc, dt");
			
			my $sth = $db_ext->select_many($select, $from, \@where, \@options);
			if ($sth) {
				# clear data to order by last day period 
				if ($dates[scalar(@dates)-1] eq $_) {
					foreach my $domain (keys %{$DATACOUNT_SORT->{$city_id}}) {
						$DATACOUNT_SORT->{$city_id}->{$domain} = 0;
					}
					foreach my $domain (keys %{$DATADOMAINS_COUNT_SORT->{$city_id}}) {
						$DATADOMAINS_COUNT_SORT->{$city_id}->{$domain} = 0;
					}
				}

				while(my $values = $sth->fetchrow_hashref()) {
					#-- details
					$DATACOUNT->{$city_id}->{$_}->{$values->{domain}}->{count} = $values->{cnt};
					my $curvalue = $DATACOUNT->{$city_id}->{$_}->{$values->{domain}}->{count};
					my $prevvalue = 0;
					$prevvalue = $DATACOUNT->{$city_id}->{$prevdate}->{$values->{domain}}->{count} if ($DATACOUNT->{$city_id}->{$prevdate});
					$DATACOUNT->{$city_id}->{$_}->{$values->{domain}}->{change} = $oUtils->get_increase($curvalue, $prevvalue);
					#--
					$DATACOUNT_SORT->{$city_id}->{$values->{domain}} = $values->{cnt};
					
					#- subdomains
					my $dom = $values->{domain};
					if ($oUtils->is_ip($dom)) {
						my @m = split(/\./, $dom);
						$dom = join(".", @m[0,1]).".*";
					} else {
						$dom = $oUtils->get_subdomain($dom);
					}
					$DATADOMAINS_COUNT->{$city_id}->{$_}->{$dom}->{count} = 0 unless ($DATADOMAINS_COUNT->{$city_id}->{$_}->{$dom}->{count});
					$DATADOMAINS_COUNT->{$city_id}->{$_}->{$dom}->{count} += $values->{cnt};
					$curvalue = $DATADOMAINS_COUNT->{$city_id}->{$_}->{$dom}->{count};
					$prevvalue = 0;
					$prevvalue = $DATADOMAINS_COUNT->{$city_id}->{$prevdate}->{$dom}->{count} if ($DATADOMAINS_COUNT->{$city_id}->{$prevdate});
					$DATADOMAINS_COUNT->{$city_id}->{$_}->{$dom}->{change} = $oUtils->get_increase($curvalue, $prevvalue);
					
					$DATADOMAINS_COUNT_SORT->{$city_id}->{$dom} = 0 unless ($DATADOMAINS_COUNT_SORT->{$city_id}->{$dom});
					$DATADOMAINS_COUNT_SORT->{$city_id}->{$dom} += $values->{cnt};
				}
				$sth->finish();
			}
		}
		$prevdate = $_;
	}
=end of main loop
=cut
	my $end_sec = time();
	my @ts = gmtime($end_sec - $start_sec);

	$oConf->log($databases->{$city_id} . " processed ".sprintf ("%d hours %d minutes %d seconds",@ts[2,1,0]));
}

#my $d = Data::Dumper->Dump([%{$DATA->{511}}], [qw(data)]);
#$oConf->log($d);

if (! scalar keys %$DATA) {
	$oConf->log("No data found for parameters: " . $daysago . ", ". $check);
	exit;
}

=checking results
=cut
$oConf->log("checking results and make % changes");
my $res = ();

=XLS - default settings ========================
=init XLS spreadsheet
=cut
my $dir = "/home/reports/referrer/";
mkdir($dir) if (!(-e $dir)) ;
unlink ($XLS_FILE_DETAILS);
unlink ($XLS_FILE);
my $workbook = Spreadsheet::WriteExcel::Big->new($XLS_FILE_DETAILS);
my @cols = (A..Z);

my $formatHdrMerge = $workbook->add_format( bold => 1, color => 'black', valign => 'vcenter', align => 'center' );
my $formatHdr = $workbook->add_format( bold => 1, color => 'black', align => 'center');
my $formatBody = $workbook->add_format( bold => 0, color => 'black', valign => 'vcenter', align => 'right');
my $formatBodyDomain = $workbook->add_format( bold => 0, color => 'blue', valign => 'vcenter', align => 'left');
my $formatBodySum = $workbook->add_format( bold => 1, color => 'black', valign => 'vcenter', align => 'right');

my $sheets = ();

=details stats
=cut

foreach my $city_id (keys %$DATA) {
	my $sheet = $workbook->add_worksheet($databases->{$city_id});
	$sheets->{$city_id} = $sheet;
	$sheet->activate();
	my ($col, $row) = (0, 2); 
	# database name
	$sheet->write($row, $col, $databases->{$city_id}, $formatHdr); $row+=2;
	# first column
	$sheet->write($row, $col, "Pageviews\nReferrers", $formatHdr); $col++;
	
	my $i = 0;
	foreach my $date (sort keys %{$DATA->{$city_id}}) {
		my $range = $cols[$col] . $row . ":" . $cols[$col+1] . $row;
		# date 
		$sheet->merge_range($range, UnixDate($date, "%d.%m.%Y"), $formatHdrMerge); 
		# first column
		$sheet->write($row, $col, "count", $formatHdr); 
		$sheet->write($row, $col+1, "% change", $formatHdr);
		#----

		# set 0 value for all ceils
		for ($r = $row+1; $r <= scalar keys %{$DATA_SORT->{$city_id}}; $r++) {
			$sheet->write($r, $col, "0"); 
			$sheet->write($r, $col+1, "0"); 
		}

		my $d_row = $row + 1; 
		my $sum = 0;
		if ($DATA_SORT->{$city_id}) {
			foreach my $domain (sort { $DATA_SORT->{$city_id}->{$b} <=> $DATA_SORT->{$city_id}->{$a} } keys %{$DATA_SORT->{$city_id}}) {
				#----
				if ($i == 0) {
					$sheet->write($d_row, $col-1, $domain, $formatBodyDomain);
				}
				my $count = $change = 0;
				#----
				if ($DATA->{$city_id}->{$date}->{$domain}) {
					$count = $DATA->{$city_id}->{$date}->{$domain}->{count};
					$change = $DATA->{$city_id}->{$date}->{$domain}->{change};
				}
				#----
				$sheet->write($d_row, $col, $count, $formatBody);
				$sheet->write($d_row, $col+1, sprintf("%0.2f", $change), $formatBody);
				$sum+=$count;
				$d_row++;
			}
		}
		$sheet->write($d_row, 0, "Total", $formatBodySum);
		$sheet->write($d_row, $col, $sum, $formatBodySum);
		$col+=2;
		$i++;
	}
	$row = scalar(keys %{$DATA_SORT->{$city_id}}) + 10;
	$col = 0;
	$sheet->write($row, $col, "Unique visits\nReferrers", $formatHdr); $col++;
	
	$i = 0;
	foreach my $date (sort keys %{$DATACOUNT->{$city_id}}) {
		my $range = $cols[$col] . $row . ":" . $cols[$col+1] . $row;
		# date 
		$sheet->merge_range($range, UnixDate($date, "%d.%m.%Y"), $formatHdrMerge); 
		# first column
		$sheet->write($row, $col, "count", $formatHdr); 
		$sheet->write($row, $col+1, "% change", $formatHdr);
		#----

		# set 0 value for all ceils
		for ($r = $row+1; $r <= scalar keys %{$DATACOUNT_SORT->{$city_id}}; $r++) {
			$sheet->write($r, $col, "0"); 
			$sheet->write($r, $col+1, "0"); 
		}

		my $d_row = $row + 1; 
		my $sum = 0;
		if ($DATACOUNT_SORT->{$city_id}) {
			foreach my $domain (sort { $DATACOUNT_SORT->{$city_id}->{$b} <=> $DATACOUNT_SORT->{$city_id}->{$a} } keys %{$DATACOUNT_SORT->{$city_id}}) {
			#foreach my $domain (sort keys %{$DATACOUNT_SORT->{$city_id}}) {
				#----
				if ($i == 0) {
					$sheet->write($d_row, $col-1, $domain, $formatBodyDomain);
				}
				my $count = $change = 0;
				#----
				if ($DATACOUNT->{$city_id}->{$date}->{$domain}) {
					$count = $DATACOUNT->{$city_id}->{$date}->{$domain}->{count};
					$change = $DATACOUNT->{$city_id}->{$date}->{$domain}->{change};
				}
				#----
				$sheet->write($d_row, $col, $count, $formatBody);
				$sheet->write($d_row, $col+1, sprintf("%0.2f", $change), $formatBody);
				$sum+=$count;
				$d_row++;
			}
		}
		$sheet->write($d_row, 0, "Total", $formatBodySum);
		$sheet->write($d_row, $col, $sum, $formatBodySum);
		$col+=2;
		$i++;
	}	
}
$workbook->close();

undef($workbook);
=subdomains stats
=cut
$workbook = Spreadsheet::WriteExcel::Big->new($XLS_FILE);
$formatHdrMerge = $workbook->add_format( bold => 1, color => 'black', valign => 'vcenter', align => 'center' );
$formatHdr = $workbook->add_format( bold => 1, color => 'black', align => 'center');
$formatBody = $workbook->add_format( bold => 0, color => 'black', valign => 'vcenter', align => 'right');
$formatBodyDomain = $workbook->add_format( bold => 0, color => 'blue', valign => 'vcenter', align => 'left');
$formatBodySum = $workbook->add_format( bold => 1, color => 'black', valign => 'vcenter', align => 'right');

foreach my $city_id (keys %$DATADOMAINS) {
	my $sheet = $workbook->add_worksheet($databases->{$city_id});
	$sheets->{$city_id} = $sheet;
	$sheet->activate();
	my ($col, $row) = (0, 2); 
	# database name
	$sheet->write($row, $col, $databases->{$city_id}, $formatHdr); $row+=2;
	# first column
	$sheet->write($row, $col, "Pageviews\nReferrers", $formatHdr); $col++;
	
	my $i = 0;
	foreach my $date (sort keys %{$DATADOMAINS->{$city_id}}) {
		my $range = $cols[$col] . $row . ":" . $cols[$col+1] . $row;
		# date 
		$sheet->merge_range($range, UnixDate($date, "%d.%m.%Y"), $formatHdrMerge); 
		# first column
		$sheet->write($row, $col, "count", $formatHdr); 
		$sheet->write($row, $col+1, "% change", $formatHdr);
		#----

		# set 0 value for all ceils
		for ($r = $row+1; $r <= scalar keys %{$DATADOMAINS_SORT->{$city_id}}; $r++) {
			$sheet->write($r, $col, "0"); 
			$sheet->write($r, $col+1, "0"); 
		}

		my $d_row = $row + 1; 
		my $sum = 0;
		if ($DATADOMAINS_SORT->{$city_id}) {
			foreach my $domain (sort { $DATADOMAINS_SORT->{$city_id}->{$b} <=> $DATADOMAINS_SORT->{$city_id}->{$a} } keys %{$DATADOMAINS_SORT->{$city_id}}) {
			#foreach my $domain (sort keys %{$DATADOMAINS_SORT->{$city_id}}) {
				#----
				if ($i == 0) {
					$sheet->write($d_row, $col-1, $domain, $formatBodyDomain);
				}
				my $count = $change = 0;
				#----
				if ($DATADOMAINS->{$city_id}->{$date}->{$domain}) {
					$count = $DATADOMAINS->{$city_id}->{$date}->{$domain}->{count};
					$change = $DATADOMAINS->{$city_id}->{$date}->{$domain}->{change};
				}
				#----
				$sheet->write($d_row, $col, $count, $formatBody);
				$sheet->write($d_row, $col+1, sprintf("%0.2f", $change), $formatBody);
				$sum+=$count;
				$d_row++;
			}
		}
		$sheet->write($d_row, 0, "Total", $formatBodySum);
		$sheet->write($d_row, $col, $sum, $formatBodySum);
		$col+=2;
		$i++;
	}
	$row = scalar(keys %{$DATADOMAINS_SORT->{$city_id}}) + 10;
	$col = 0;
	$sheet->write($row, $col, "Unique visits\nReferrers", $formatHdr); $col++;
	
	$i = 0;
	foreach my $date (sort keys %{$DATADOMAINS_COUNT->{$city_id}}) {
		my $range = $cols[$col] . $row . ":" . $cols[$col+1] . $row;
		# date 
		$sheet->merge_range($range, UnixDate($date, "%d.%m.%Y"), $formatHdrMerge); 
		# first column
		$sheet->write($row, $col, "count", $formatHdr); 
		$sheet->write($row, $col+1, "% change", $formatHdr);
		#----

		# set 0 value for all ceils
		for ($r = $row+1; $r <= scalar keys %{$DATADOMAINS_COUNT_SORT->{$city_id}}; $r++) {
			$sheet->write($r, $col, "0"); 
			$sheet->write($r, $col+1, "0"); 
		}

		my $d_row = $row + 1; 
		my $sum = 0;
		if ($DATADOMAINS_COUNT_SORT->{$city_id}) {
			foreach my $domain (sort { $DATADOMAINS_COUNT_SORT->{$city_id}->{$b} <=> $DATADOMAINS_COUNT_SORT->{$city_id}->{$a} } keys %{$DATADOMAINS_COUNT_SORT->{$city_id}}) {
			#foreach my $domain (sort keys %{$DATADOMAINS_COUNT_SORT->{$city_id}}) {
				#----
				if ($i == 0) {
					$sheet->write($d_row, $col-1, $domain, $formatBodyDomain);
				}
				my $count = $change = 0;
				#----
				if ($DATADOMAINS_COUNT->{$city_id}->{$date}->{$domain}) {
					$count = $DATADOMAINS_COUNT->{$city_id}->{$date}->{$domain}->{count};
					$change = $DATADOMAINS_COUNT->{$city_id}->{$date}->{$domain}->{change};
				}
				#----
				$sheet->write($d_row, $col, $count, $formatBody);
				$sheet->write($d_row, $col+1, sprintf("%0.2f", $change), $formatBody);
				$sum+=$count;
				$d_row++;
			}
		}
		$sheet->write($d_row, 0, "Total", $formatBodySum);
		$sheet->write($d_row, $col, $sum, $formatBodySum);
		$col+=2;
		$i++;
	}	
}
$workbook->close();

=finish
=cut
system("gzip -c $XLS_FILE_DETAILS > $XLS_FILE_DETAILS.gz") if ( -e $XLS_FILE_DETAILS );

my %updata = ("-dj_result_file" => "concat_ws(',', dj_result_file, '".$XLS_FILE_DETAILS.".gz')");
$oConf->log("update task info in database (datails)");
my $q_up = $db_ext->update_daemon_task( \%updata, $TASKID );
if ( $q_up ) {
	$oConf->log("send emails with report");
	$oUtils->send_file( $email_title, $task->{dj_result_emails}, $XLS_FILE_DETAILS . ".gz" );
}

=subdomains details
=cut

system("gzip -c $XLS_FILE > $XLS_FILE.gz") if ( -e $XLS_FILE );
%updata = ("-dj_result_file" => "concat_ws(',', dj_result_file, '".$XLS_FILE.".gz')");
$oConf->log("update task info in database (subdomains)");
$q_up = $db_ext->update_daemon_task( \%updata, $TASKID );
if ( $q_up ) {
	$oConf->log("send emails with report");
	$oUtils->send_file( $email_title, $task->{dj_result_emails}, $XLS_FILE . ".gz" );
}
$oConf->log("process done");

1;
